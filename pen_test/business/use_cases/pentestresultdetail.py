import asyncio
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed


from typing import List
from uuid import UUID

from infrastructure.framework import db
from infrastructure.framework.models import PenTestVulnerability, PentestAnomalies, Website
from infrastructure.repository.anomalies_repos import AnomaliesRepository
from infrastructure.repository.vulnerability_repos import VulnerabilityRepository
from infrastructure.repository.website_repository import WebsiteRepository
from pen_test.business.use_cases.pentest import PentTestRun
from time import sleep, perf_counter


def launch_pentest(website_id: str) -> None:
    logging.error(website_id)
    website_repo = WebsiteRepository(db, Website)
    vul_repo = VulnerabilityRepository(db, PenTestVulnerability)
    anomaly_repo = AnomaliesRepository(db, PentestAnomalies)
    website = website_repo.find(website_id)
    pen_test = PentTestRun(
        _website_repo=website_repo,
        _vul_repo=vul_repo,
        _anomaly_repo=anomaly_repo,
        _url=website.url,
        _name=website.name
    )

    pen_test.run()



def launch_list_pentest(website_url: str) -> None:

    website_repo = WebsiteRepository(db, Website)
    vul_repo = VulnerabilityRepository(db, PenTestVulnerability)
    anomaly_repo = AnomaliesRepository(db, PentestAnomalies)
    website = website_repo.find_by_url(website_url)
    pen_test = PentTestRun(
        website_repo,
        vul_repo,
        anomaly_repo,
        website.url,
        website.name
    )

    pen_test.run()
    sleep(15)


def scan_list_website(websites: List[str]):

    import threading
    for website in websites:
        threading.Thread(target=launch_list_pentest(website))
    # task = [asyncio.create_task(launch_list_pentest(website)) for website in websites]
    # await asyncio.wait(task)
    # loop = asyncio.get_event_loop()
    # loop.run_until_complete(task[0])
    #
    # pending = asyncio.all_tasks(loop=loop)
    # group = asyncio.gather(*pending)
    # loop.run_until_complete(group)
    #
    # loop.close()


    # with ThreadPoolExecutor() as executor:
    #     future = [executor.submit(launch_list_pentest, website) for website in websites]
    #     as_completed(future)
