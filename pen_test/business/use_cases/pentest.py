import asyncio
from typing import Dict, List
from uuid import UUID

from pen_test.business.entity import AnomaliesEntity, VulnerabilityEntity, WebsiteEntity
from pen_test.business.interfaces.ianomalies_repos import IAnomaliesRepository
from pen_test.business.interfaces.ipen_test import IPentTestRun
from pen_test.business.interfaces.ivulnerability_repos import IVulnerabilityRepository
from pen_test.business.interfaces.iwebsite_repository import IWebsiteRepository
from pen_test.business.use_cases.attacks import InitPenTest


class PentTestRun(IPentTestRun):

    def __int__(
            self,
            website_repo: IWebsiteRepository,
            vul_repo: IVulnerabilityRepository,
            anomaly_repo: IAnomaliesRepository,
            url,
            name
    ):
        self._website_repo = website_repo
        self._vul_repo = vul_repo
        self._anomaly_repo = anomaly_repo
        self._url = url
        self._name = name

    def create_anomalies(self, anomaly: Dict, website_id: UUID) -> None:
        key_dict = anomaly.keys()
        output = []
        for key in key_dict:
            a = AnomaliesEntity.factory(
                website_id=website_id,
                name=key,
                number=len(anomaly[key]),
                details=anomaly[key]
            )
            anomaly_ent = self._anomaly_repo.create(a)
            output.append(anomaly_ent)

    def create_vul(self, vul: Dict, website_id: UUID) -> None:
        keys = vul.keys()
        output = []
        for key in keys:
            v = VulnerabilityEntity.factory(
                website_id=website_id,
                attack_name=key,
                num_vulnerability=len(vul[key]),
                attack_details=vul[key],
            )
            vul_ent = self._vul_repo.create(v)
            output.append(vul_ent)

    def run(self) -> None:
        website = self._website_repo.find_by_url(url=self._url)
        if not website:
            website_ent = WebsiteEntity.factory(url=self._url, name=self._name)
            website = self._website_repo.create(website_ent)
        pen_test = InitPenTest(website.url)
        result = asyncio.run(pen_test.execute())
        self.create_vul(result['_vulns'], website.uuid)
        self.create_anomalies(result['_anomalies'], website.uuid)





